{
  // Format files on save.
  "format_on_save": true,

  // Enable log output.
  "log": false,

  // Enable debug mode.
  // Commands can have additional flags for debug mode.
  "debug": false,

  // The maximum allowed execution time in seconds.
  // Be warned that higher numbers may lock the interface.
  "timeout": 1,

  // Prepend these paths to $PATH when running commands.
  // If you use [asdf](https://asdf-vm.com), you may want to add `~/.asdf/shims`
  // to the list below.
  "paths": [],

  // Set custom environment variables that will be passed to the executing
  // command.
  //
  // Notice that the value MUST be string (e.g. use `"true"` and not `true`).
  "env": {},

  // Defines global variables.
  "variables": {
    "bundler": [{ "root_dir_has": ["Gemfile"], "value": ["bundle", "exec"] }],
  },

  // Format Crystal file.
  "crystal": {
    // The command that will be executed for format files.
    "command": ["crystal", "tool", "format", "$file"],

    // The scopes that will be considered when formatting
    "scopes": ["source.crystal"],

    // Additional flags when running in debug mode.
    "debug": [],

    // When no custom config file exists, use a default config file.
    "default_config": null,

    // Config files that will be looked up on the root of the project.
    "config_files": [],
  },

  // Format Python file using [yapf](https://pypi.org/project/yapf/).
  "yapf": {
    // The command that will be executed for format files.
    "command": ["yapf", "--style", "$config", "--in-place", "$file"],

    // The scopes that will be considered when formatting
    "scopes": ["source.python"],

    // Additional flags when running in debug mode.
    "debug": ["--verbose"],

    // When no custom config file exists, use a default config file.
    "default_config": "Packages/Codefmt/config/style.yapf",

    // Config files that will be looked up on the root of the project.
    "config_files": [".style.yapf", "setup.cfg", "pyproject.toml"],
  },

  // Format Dart files using [Flutter](https://flutter.dev/docs/reference/flutter-cli).
  "flutter": {
    // The command that will be executed for format files.
    "command": ["flutter", "format", "$file"],

    // The scopes that will be considered when formatting
    "scopes": ["source.dart"],

    // Additional flags when running in debug mode.
    "debug": [],

    // When no custom config file exists, use a default config file.
    "default_config": null,

    // Config files that will be looked up on the root of the project.
    "config_files": [],
  },

  // Format Dart files using [dartfmt](https://dart.dev/tools/dartfmt).
  "dartfmt": {
    // The command that will be executed for format files.
    "command": [
      "dartfmt",
      "--fix",
      "--line-length",
      "80",
      "--overwrite",
      "$file",
    ],

    // The scopes that will be considered when formatting
    "scopes": ["source.dart"],

    // Additional flags when running in debug mode.
    "debug": [],

    // When no custom config file exists, use a default config file.
    "default_config": null,

    // Config files that will be looked up on the root of the project.
    "config_files": [],
  },

  // Format Python files using [SVGO](https:/d/www.npmjs.com/package/@svgr/plugin-svgo).
  "svgo": {
    // The command that will be executed for format files.
    "command": [
      "svgo",
      "--config",
      "$config",
      "--multipass",
      "--pretty",
      "--input",
      "$file",
      "--output",
      "$file",
    ],

    // The scopes that will be considered when formatting
    "scopes": ["text.xml.svg"],

    // Additional flags when running in debug mode.
    "debug": [],

    // When no custom config file exists, use a default config file.
    "default_config": "Packages/Codefmt/config/svgo.js",

    // Config files that will be looked up on the root of the project.
    "config_files": [
      ".svgo.yml",
      ".svgo.json",
      "svgo.config.json",
      ".svgo.config.json",
      "svgo.config.js",
      ".svgorc.json",
      ".svgorc.yml",
    ],
  },

  // Format Python files using [autopep8](https://pypi.org/project/autopep8/).
  "autopep8": {
    // The command that will be executed for format files.
    "command": [
      "autopep8",
      "--in-place",
      "--aggressive",
      "--global-config",
      "$config",
      "$file",
    ],

    // The scopes that will be considered when formatting
    "scopes": ["source.python"],

    // Additional flags when running in debug mode.
    "debug": ["--verbose"],

    // When no custom config file exists, use a default config file.
    "default_config": null,

    // Config files that will be looked up on the root of the project.
    "config_files": [
      ".pycodestyle",
      "setup.cfg",
      "tox.ini",
      ".pep8",
      ".flake8",
    ],
  },

  // Format Swift files using [swiftformat](https://github.com/nicklockwood/SwiftFormat/).
  "swiftformat": {
    // The command that will be executed for format files.
    "command": [
      "swiftformat",
      "$file",
      "--output",
      "$file",
      "--config",
      "$config",
    ],

    // The scopes that will be considered when formatting
    "scopes": ["source.swift"],

    // Additional flags when running in debug mode.
    "debug": ["--verbose"],

    // When no custom config file exists, use a default config file.
    "default_config": null,

    // Config files that will be looked up on the root of the project.
    "config_files": [".swiftformat"],
  },

  // Format PHP files using [PHP Code Standards Fixer](https://cs.symfony.com).
  "php-cs-fixer": {
    // The command that will be executed for format files.
    "command": [
      "php-cs-fixer",
      "fix",
      "--using-cache",
      "no",
      "--config",
      "$config",
      "$file",
    ],

    // The scopes that will be considered when formatting
    "scopes": ["embedding.php"],

    // Additional flags when running in debug mode.
    "debug": ["-vvv"],

    // When no custom config file exists, use a default config file.
    "default_config": null,

    // Config files that will be looked up on the root of the project.
    "config_files": [".php_cs"],
  },

  // Format Golang files using goimports.
  "goimports": {
    // The command that will be executed for format files.
    "command": ["goimports", "-w", "$file"],

    // The scopes that will be considered when formatting
    "scopes": ["source.go"],

    // Additional flags when running in debug mode.
    "debug": [],

    // When no custom config file exists, use a default config file.
    "default_config": null,

    // Config files that will be looked up on the root of the project.
    "config_files": [],
  },

  // Format Golang files using gofmt. Disabled by default.
  // If you prefer gofmt over goimports, make sure you remove `goimports` from
  // the `formatters` list.
  "gofmt": {
    // The command that will be executed for format files.
    "command": ["gofmt", "-w", "$file"],

    // The scopes that will be considered when formatting
    "scopes": ["source.go"],

    // Additional flags when running in debug mode.
    "debug": [],

    // When no custom config file exists, use a default config file.
    "default_config": null,

    // Config files that will be looked up on the root of the project.
    "config_files": [],
  },

  // Format Rust files using rustfmt.
  "rustfmt": {
    // The command that will be executed for format files.
    "command": [
      "rustfmt",
      "--edition",
      "2021",
      "--config-path",
      "$config",
      "$file",
    ],

    // The scopes that will be considered when formatting
    "scopes": ["source.rust"],

    // Additional flags when running in debug mode.
    "debug": ["--verbose"],

    // When no custom config file exists, use a default config file.
    "default_config": null,

    // Config files that will be looked up on the root of the project.
    "config_files": ["rustfmt.toml", ".rustfmt.toml"],
  },

  // Format Ruby files using rubocop.
  "rubocop": {
    // The command that will be executed for format files.
    "command": [
      "$bundler",
      "rubocop",
      "--autocorrect-all",
      "--raise-cop-error",
      "--no-color",
      "--config",
      "$config",
      "$file",
    ],

    // The scopes that will be considered when formatting
    "scopes": ["source.ruby"],

    // Additional flags when running in debug mode.
    "debug": ["--debug", "--extra-details"],

    // When no custom config file exists, use a default config file.
    "default_config": null,

    // Config files that will be looked up on the root of the project.
    "config_files": [".rubocop.yml"],
  },

  // Format Ruby files using [rubyfmt](https://github.com/penelopezone/rubyfmt).
  // Disabled by default.
  // If you prefer rubyfmt over rubocop, make sure you remove `rubocop` from
  // the `formatters` list.
  "rubyfmt": {
    // The command that will be executed for format files.
    "command": ["rubyfmt", "-i", "$file"],

    // The scopes that will be considered when formatting
    "scopes": ["source.ruby"],

    // Additional flags when running in debug mode.
    "debug": [],

    // When no custom config file exists, use a default config file.
    "default_config": null,

    // Config files that will be looked up on the root of the project.
    "config_files": [],
  },

  // Format files using Prettier.
  "prettier": {
    // The command that will be executed for format files.
    "command": [
      "prettier",
      "--parser",
      "$parser",
      "--write",
      "--config",
      "$config",
      "$file",
    ],

    // The scopes that will be considered when formatting
    "scopes": [
      "source.css",
      "source.js",
      "source.json",
      "source.jsx",
      "source.postcss",
      "source.scss",
      "source.ts",
      "source.tsx",
      "source.yaml",
      "text.html.markdown",
      "text.html",
    ],

    // Variables that will be used to compose the command.
    "variables": {
      "parser": [
        { "endswith": [".html"], "value": "html" },
        { "endswith": [".md", ".markdown"], "value": "markdown" },
        { "endswith": [".md.erb", ".markdown"], "value": "markdown" },
        { "endswith": [".css", ".postcss"], "value": "css" },
        { "endswith": [".scss"], "value": "scss" },
        { "endswith": [".yaml", ".yml"], "value": "yaml" },
        { "default": "" },
      ],
    },

    // Additional flags when running in debug mode.
    "debug": ["--log-level", "debug"],

    // When no custom config file exists, use a default config file.
    "default_config": "Packages/Codefmt/config/prettier.json",

    // Config files that will be looked up on the root of the project.
    "config_files": [
      ".prettierrc",
      ".prettierrc.json",
      ".prettierrc.yml",
      ".prettierrc.yaml",
      ".prettierrc.json5",
      ".prettierrc.js",
      ".prettierrc.cjs",
      "prettier.config.js",
      "prettier.config.cjs",
      ".prettierrc.toml",
    ],
  },

  // Format files using eslint.
  "eslint": {
    // The command that will be executed for format files.
    "command": ["eslint", "--fix", "--config", "$config", "$file"],

    // The scopes that will be considered when formatting
    "scopes": ["source.js", "source.jsx", "source.ts", "source.tsx"],

    // Additional flags when running in debug mode.
    "debug": ["--debug"],

    // When no custom config file exists, use a default config file.
    "default_config": "Packages/Codefmt/config/eslint.json",

    // Config files that will be looked up on the root of the project.
    "config_files": [
      ".eslintrc.js",
      ".eslintrc.cjs",
      ".eslintrc.yaml",
      ".eslintrc.yml",
      ".eslintrc.json",
      ".eslintrc",
    ],
  },

  // Format files using biome.
  "biome": {
    // The command that will be executed for format files.
    "command": ["npx", "biome", "format", "--write", "--config-path", "$config", "$file"],

    // The scopes that will be considered when formatting
    "scopes": ["source.js", "source.jsx", "source.ts", "source.tsx"],

    // Additional flags when running in debug mode.
    "debug": ["--verbose"],

    // When no custom config file exists, use a default config file.
    "default_config": "Packages/Codefmt/config/biome.json",

    // Config files that will be looked up on the root of the project.
    "config_files": ["biome.json", "biome.jsonc"],
  },

  // Add your custom overrides to the following node.
  // You can set only the keys you need to override, as the keys are merged.
  "overrides": {},

  // A list of formatters that are enabled.
  // Must match keys defined above.
  "formatters": [
    "goimports",
    "rubocop",
    "prettier",
    "eslint",
    "php-cs-fixer",
    "rustfmt",
    "svgo",
    "swiftformat",
    "flutter",
    "yapf",
    "crystal",
  ],
}
